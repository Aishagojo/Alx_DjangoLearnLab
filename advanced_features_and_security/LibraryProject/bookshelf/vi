# bookshelf/management/commands/create_groups.py

from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from bookshelf.models import Book

class Command(BaseCommand):
    help = "Create default groups and assign permissions for the Book model"

    def handle(self, *args, **kwargs):
        # Define groups and their permissions
        group_permissions = {
            "Admins": ["can_view", "can_create", "can_edit", "can_delete"],
            "Editors": ["can_create", "can_edit"],
            "Viewers": ["can_view"],
        }

        # Get the content type for the Book model
        book_content_type = ContentType.objects.get_for_model(Book)

        for group_name, perms in group_permissions.items():
            # Create or get the group
            group, created = Group.objects.get_or_create(name=group_name)
            if created:
                self.stdout.write(f"Created group '{group_name}'")
            else:
                self.stdout.write(f"Group '{group_name}' already exists")

            # Clear old permissions to avoid duplicates
            group.permissions.clear()

            # Assign permissions to the group
            for perm_code in perms:
                try:
                    perm = Permission.objects.get(
                        codename=perm_code,
                        content_type=book_content_type
                    )
                    group.permissions.add(perm)
                    self.stdout.write(f"Added permission '{perm_code}' to '{group_name}'")
                except Permission.DoesNotExist:
                    self.stdout.write(self.style.ERROR(
                        f"Permission '{perm_code}' not found for Book model"
                    ))

        self.stdout.write(self.style.SUCCESS("Groups and permissions setup completed."))

